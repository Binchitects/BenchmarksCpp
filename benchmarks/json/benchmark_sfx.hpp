#pragma once

#include <string>
#include <benchmark/benchmark.h>

const benchmark::IterationCount iterations = 1000000;

const std::string small_flat_json = R"({"name":"John","age":30,"city":"New York"})";
const std::string small_flat_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York"
})";

const std::string medium_flat_json = R"({"name":"John","age":30,"city":"New York","email":"john@example.com","phone":"123-456-7890","address":"123 Main St","zipcode":"10001","country":"USA","occupation":"Engineer","company":"Tech Corp"})";
const std::string medium_flat_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York",
    "email": "john@example.com",
    "phone": "123-456-7890",
    "address": "123 Main St",
    "zipcode": "10001",
    "country": "USA",
    "occupation": "Engineer",
    "company": "Tech Corp"
})";

const std::string large_flat_json = R"({"name":"John","age":30,"city":"New York","email":"john@example.com","phone":"123-456-7890","address":"123 Main St","zipcode":"10001","country":"USA","occupation":"Engineer","company":"Tech Corp","department":"Engineering","manager":"Jane Smith","start_date":"2020-01-15","salary":120000,"bonus":15000,"vacation_days":20,"sick_days":10,"office_number":"B-204","extension":"x1234","emergency_contact":"Mary Doe","emergency_phone":"987-654-3210"})";
const std::string large_flat_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York",
    "email": "john@example.com",
    "phone": "123-456-7890",
    "address": "123 Main St",
    "zipcode": "10001",
    "country": "USA",
    "occupation": "Engineer",
    "company": "Tech Corp",
    "department": "Engineering",
    "manager": "Jane Smith",
    "start_date": "2020-01-15",
    "salary": 120000,
    "bonus": 15000,
    "vacation_days": 20,
    "sick_days": 10,
    "office_number": "B-204",
    "extension": "x1234",
    "emergency_contact": "Mary Doe",
    "emergency_phone": "987-654-3210"
})";

const std::string small_nested_json = R"({"name":"John","age":30,"city":"New York","team":{"name":"math","department":{"name":"science"}}})";
const std::string small_nested_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York",
    "team": {
        "name": "math",
        "department": {
            "name": "science"
        }
    }
})";

const std::string medium_nested_json = R"({"name":"John","age":30,"city":"New York","team":{"name":"math","department":{"name":"science","location":{"building":"A","floor":3,"room":"301"}},"lead":{"name":"Alice","role":"lead","experience":5},"member":{"name":"Bob","role":"member","experience":2}},"project":{"name":"Project A","status":"active","priority":"high"}})";
const std::string medium_nested_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York",
    "team": {
        "name": "math",
        "department": {
            "name": "science",
            "location": {
                "building": "A",
                "floor": 3,
                "room": "301"
            }
        },
        "lead": {
            "name": "Alice",
            "role": "lead",
            "experience": 5
        },
        "member": {
            "name": "Bob",
            "role": "member",
            "experience": 2
        }
    },
    "project": {
        "name": "Project A",
        "status": "active",
        "priority": "high"
    }
})";

const std::string large_nested_json = R"({"name":"John","age":30,"city":"New York","team":{"name":"math","department":{"name":"science","location":{"building":"A","floor":3,"room":"301","capacity":30},"head":{"name":"Dr. Smith","title":"Professor","years":15}},"lead":{"name":"Alice","role":"lead","experience":5,"expertise":{"primary":"C++","secondary":"Python"}},"member":{"name":"Bob","role":"member","experience":2,"expertise":{"primary":"Java","secondary":"SQL"}}},"project":{"name":"Project A","status":"active","team":{"lead":"Alice","member1":"Bob","member2":"Charlie"},"milestone":{"name":"Phase 1","completed":true,"due_date":"2024-06-01"}}})";
const std::string large_nested_json_indented = R"({
    "name": "John",
    "age": 30,
    "city": "New York",
    "team": {
        "name": "math",
        "department": {
            "name": "science",
            "location": {
                "building": "A",
                "floor": 3,
                "room": "301",
                "capacity": 30
            },
            "head": {
                "name": "Dr. Smith",
                "title": "Professor",
                "years": 15
            }
        },
        "lead": {
            "name": "Alice",
            "role": "lead",
            "experience": 5,
            "expertise": {
                "primary": "C++",
                "secondary": "Python"
            }
        },
        "member": {
            "name": "Bob",
            "role": "member",
            "experience": 2,
            "expertise": {
                "primary": "Java",
                "secondary": "SQL"
            }
        }
    },
    "project": {
        "name": "Project A",
        "status": "active",
        "team": {
            "lead": "Alice",
            "member1": "Bob",
            "member2": "Charlie"
        },
        "milestone": {
            "name": "Phase 1",
            "completed": true,
            "due_date": "2024-06-01"
        }
    }
})";

const std::string small_array_json = R"({"numbers":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"strings":["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t"],"booleans":[true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false]})";
const std::string small_array_json_indented = R"({
    "numbers":[
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
    ],
    "strings":[
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t"
    ],
    "booleans":[
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false,
        true,
        false
    ]
})";

const std::string medium_array_json = R"({"numbers":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"strings":["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","bb","cc","dd","ee","ff","gg","hh","ii","jj","kk","ll","mm","nn","oo","pp","qq","rr","ss","tt","uu","vv","ww","xx","yy","zz","aaa","bbb","ccc","ddd","eee","fff","ggg","hhh","iii","jjj","kkk","lll","mmm","nnn","ooo","ppp","qqq","rrr","sss","ttt","uuu","vvv","www","xxx","yyy","zzz","aaaa","bbbb","cccc","dddd","eeee","ffff","gggg","hhhh","iiii","jjjj","kkkk","llll","mmmm","nnnn","oooo","pppp","qqqq","rrrr","ssss","tttt","uuuu","vvvv","wwww","xxxx","yyyy","zzzz"],"booleans":[true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false]})";
const std::string medium_array_json_indented = R"({
    "numbers": [
        1,		
        2,		
        3,		
        4,		
        5,		
        6,		
        7,		
        8,		
        9,		
        10,		
        11,		
        12,		
        13,		
        14,		
        15,		
        16,		
        17,		
        18,		
        19,		
        20,		
        21,		
        22,		
        23,		
        24,		
        25,		
        26,		
        27,		
        28,		
        29,		
        30,		
        31,		
        32,		
        33,		
        34,		
        35,		
        36,		
        37,		
        38,		
        39,		
        40,		
        41,		
        42,		
        43,		
        44,		
        45,		
        46,		
        47,		
        48,		
        49,		
        50,		
        51,		
        52,		
        53,		
        54,		
        55,		
        56,		
        57,		
        58,		
        59,		
        60,		
        61,		
        62,		
        63,		
        64,		
        65,		
        66,		
        67,		
        68,		
        69,		
        70,		
        71,		
        72,		
        73,		
        74,		
        75,		
        76,		
        77,		
        78,		
        79,		
        80,		
        81,		
        82,		
        83,		
        84,		
        85,		
        86,		
        87,		
        88,		
        89,		
        90,		
        91,		
        92,		
        93,		
        94,		
        95,		
        96,		
        97,		
        98,		
        99,		
        100
    ],
    "strings": [
        "a",		
        "b",		
        "c",		
        "d",		
        "e",		
        "f",		
        "g",		
        "h",		
        "i",		
        "j",		
        "k",		
        "l",		
        "m",		
        "n",		
        "o",		
        "p",		
        "q",		
        "r",		
        "s",		
        "t",		
        "u",		
        "v",		
        "w",		
        "x",		
        "y",		
        "z",		
        "aa",		
        "bb",		
        "cc",		
        "dd",		
        "ee",		
        "ff",		
        "gg",		
        "hh",		
        "ii",		
        "jj",		
        "kk",		
        "ll",		
        "mm",		
        "nn",		
        "oo",		
        "pp",		
        "qq",		
        "rr",		
        "ss",		
        "tt",		
        "uu",		
        "vv",		
        "ww",		
        "xx",		
        "yy",		
        "zz",		
        "aaa",		
        "bbb",		
        "ccc",		
        "ddd",		
        "eee",		
        "fff",		
        "ggg",		
        "hhh",		
        "iii",		
        "jjj",		
        "kkk",		
        "lll",		
        "mmm",		
        "nnn",		
        "ooo",		
        "ppp",		
        "qqq",		
        "rrr",		
        "sss",		
        "ttt",		
        "uuu",		
        "vvv",		
        "www",		
        "xxx",		
        "yyy",		
        "zzz",		
        "aaaa",		
        "bbbb",		
        "cccc",		
        "dddd",		
        "eeee",		
        "ffff",		
        "gggg",		
        "hhhh",		
        "iiii",		
        "jjjj",		
        "kkkk",		
        "llll",		
        "mmmm",		
        "nnnn",		
        "oooo",		
        "pppp",		
        "qqqq",		
        "rrrr",		
        "ssss",		
        "tttt",		
        "uuuu",		
        "vvvv",		
        "wwww",		
        "xxxx",		
        "yyyy",		
        "zzzz"
    ],
    "booleans": [
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false
    ]
})";

const std::string large_array_json = R"({"numbers":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],"strings":["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","bb","cc","dd","ee","ff","gg","hh","ii","jj","kk","ll","mm","nn","oo","pp","qq","rr","ss","tt","uu","vv","ww","xx","yy","zz","aaa","bbb","ccc","ddd","eee","fff","ggg","hhh","iii","jjj","kkk","lll","mmm","nnn","ooo","ppp","qqq","rrr","sss","ttt","uuu","vvv","www","xxx","yyy","zzz","aaaa","bbbb","cccc","dddd","eeee","ffff","gggg","hhhh","iiii","jjjj","kkkk","llll","mmmm","nnnn","oooo","pppp","qqqq","rrrr","ssss","tttt","uuuu","vvvv","wwww","xxxx","yyyy","zzzz","aaaaa","bbbbb","ccccc","ddddd","eeeee","fffff","ggggg","hhhhh","iiiii","jjjjj","kkkkk","lllll","mmmmm","nnnnn","ooooo","ppppp","qqqqq","rrrrr","sssss","ttttt","uuuuu","vvvvv","wwwww","xxxxxx","yyyyy","zzzzz","aaaaaa","bbbbbb","cccccc","dddddd","eeeeee","ffffff","gggggg","hhhhhh","iiiiii","jjjjjj","kkkkkk","llllll","mmmmmm","nnnnnn","oooooo","pppppp","qqqqqq","rrrrrr","ssssss","tttttt","uuuuuu","vvvvvv","wwwwww","xxxxxxx","yyyyyyy","zzzzzzz"],"booleans":[true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false]})";
const std::string large_array_json_indented = R"({
    "numbers":[
        1,		
        2,		
        3,		
        4,		
        5,		
        6,		
        7,		
        8,		
        9,		
        10,		
        11,		
        12,		
        13,		
        14,		
        15,		
        16,		
        17,		
        18,		
        19,		
        20,		
        21,		
        22,		
        23,		
        24,		
        25,		
        26,		
        27,		
        28,		
        29,		
        30,		
        31,		
        32,		
        33,		
        34,		
        35,		
        36,		
        37,		
        38,		
        39,		
        40,		
        41,		
        42,		
        43,		
        44,		
        45,		
        46,		
        47,		
        48,		
        49,		
        50,		
        51,		
        52,		
        53,		
        54,		
        55,		
        56,		
        57,		
        58,		
        59,		
        60,		
        61,		
        62,		
        63,		
        64,		
        65,		
        66,		
        67,		
        68,		
        69,		
        70,		
        71,		
        72,		
        73,		
        74,		
        75,		
        76,		
        77,		
        78,		
        79,		
        80,		
        81,		
        82,		
        83,		
        84,		
        85,		
        86,		
        87,		
        88,		
        89,		
        90,		
        91,		
        92,		
        93,		
        94,		
        95,		
        96,		
        97,		
        98,		
        99,		
        100,		
        101,		
        102,		
        103,		
        104,		
        105,		
        106,		
        107,		
        108,		
        109,		
        110,		
        111,		
        112,		
        113,		
        114,		
        115,		
        116,		
        117,		
        118,		
        119,		
        120,		
        121,		
        122,		
        123,		
        124,		
        125,		
        126,		
        127,		
        128,		
        129,		
        130,		
        131,		
        132,		
        133,		
        134,		
        135,		
        136,		
        137,		
        138,		
        139,		
        140,		
        141,		
        142,		
        143,		
        144,		
        145,		
        146,		
        147,		
        148,		
        149,		
        150,		
        151,		
        152,		
        153,		
        154,		
        155,		
        156,		
        157,		
        158,		
        159,		
        160,		
        161,		
        162,		
        163,		
        164,		
        165,		
        166,		
        167,		
        168,		
        169,		
        170,		
        171,		
        172,		
        173,		
        174,		
        175,		
        176,		
        177,		
        178,		
        179,		
        180,		
        181,		
        182,		
        183,		
        184,		
        185,		
        186,		
        187,		
        188,		
        189,		
        190,		
        191,		
        192,		
        193,		
        194,		
        195,		
        196,		
        197,		
        198,		
        199,		
        200
    ],
    "strings":[
        "a",		
        "b",		
        "c",		
        "d",		
        "e",		
        "f",		
        "g",		
        "h",		
        "i",		
        "j",		
        "k",		
        "l",		
        "m",		
        "n",		
        "o",		
        "p",		
        "q",		
        "r",		
        "s",		
        "t",		
        "u",		
        "v",		
        "w",		
        "x",		
        "y",		
        "z",		
        "aa",		
        "bb",		
        "cc",		
        "dd",		
        "ee",		
        "ff",		
        "gg",		
        "hh",		
        "ii",		
        "jj",		
        "kk",		
        "ll",		
        "mm",		
        "nn",		
        "oo",		
        "pp",		
        "qq",		
        "rr",		
        "ss",		
        "tt",		
        "uu",		
        "vv",		
        "ww",		
        "xx",		
        "yy",		
        "zz",		
        "aaa",		
        "bbb",		
        "ccc",		
        "ddd",		
        "eee",		
        "fff",		
        "ggg",		
        "hhh",		
        "iii",		
        "jjj",		
        "kkk",		
        "lll",		
        "mmm",		
        "nnn",		
        "ooo",		
        "ppp",		
        "qqq",		
        "rrr",		
        "sss",		
        "ttt",		
        "uuu",		
        "vvv",		
        "www",		
        "xxx",		
        "yyy",		
        "zzz",		
        "aaaa",		
        "bbbb",		
        "cccc",		
        "dddd",		
        "eeee",		
        "ffff",		
        "gggg",		
        "hhhh",		
        "iiii",		
        "jjjj",		
        "kkkk",		
        "llll",		
        "mmmm",		
        "nnnn",		
        "oooo",		
        "pppp",		
        "qqqq",		
        "rrrr",		
        "ssss",		
        "tttt",		
        "uuuu",		
        "vvvv",		
        "wwww",		
        "xxxx",		
        "yyyy",		
        "zzzz",		
        "aaaaa",		
        "bbbbb",		
        "ccccc",		
        "ddddd",		
        "eeeee",		
        "fffff",		
        "ggggg",		
        "hhhhh",		
        "iiiii",		
        "jjjjj",		
        "kkkkk",		
        "lllll",		
        "mmmmm",		
        "nnnnn",		
        "ooooo",		
        "ppppp",		
        "qqqqq",		
        "rrrrr",		
        "sssss",		
        "ttttt",		
        "uuuuu",		
        "vvvvv",		
        "wwwww",		
        "xxxxx",		
        "yyyyy",		
        "zzzzz",		
        "aaaaaa",		
        "bbbbbb",		
        "cccccc",		
        "dddddd",		
        "eeeeee",		
        "ffffff",		
        "gggggg",		
        "hhhhhh",		
        "iiiiii",		
        "jjjjjj",		
        "kkkkkk",		
        "llllll",		
        "mmmmmm",		
        "nnnnnn",		
        "oooooo",		
        "pppppp",		
        "qqqqqq",		
        "rrrrrr",		
        "ssssss",		
        "tttttt",		
        "uuuuuu",		
        "vvvvvv",		
        "wwwwww",		
        "xxxxxx",		
        "yyyyyy",		
        "zzzzzz",		
        "aaaaaaa",		
        "bbbbbbb",		
        "ccccccc",		
        "ddddddd",		
        "eeeeeee",		
        "fffffff",		
        "ggggggg",		
        "hhhhhhh",		
        "iiiiiii",		
        "jjjjjjj",		
        "kkkkkkk",		
        "lllllll",		
        "mmmmmmm",		
        "nnnnnnn",		
        "ooooooo",		
        "ppppppp",		
        "qqqqqqq",		
        "rrrrrrr",		
        "sssssss",		
        "ttttttt",		
        "uuuuuuu",		
        "vvvvvvv",		
        "wwwwwww",		
        "xxxxxxx",		
        "yyyyyyy",		
        "zzzzzzz"
    ],
    "booleans":[
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false,		
        true,		
        false
    ]
})";

const std::string small_mixed_json = R"({"name":"John","age":30,"active":true,"tags":["developer","cpp","backend"],"preferences":{"theme":"dark","notifications":true},"last_login":"2024-03-15"})";
const std::string small_mixed_json_indented = R"({
    "name": "John",
    "age": 30,
    "active": true,
    "tags": [
        "developer",
        "cpp",
        "backend"
    ],
    "preferences": {
        "theme": "dark",
        "notifications": true
    },
    "last_login": "2024-03-15"
})";

const std::string medium_mixed_json = R"({"user":{"name":"John","age":30,"active":true},"stats":{"logins":[1,2,3,4,5],"scores":[85,92,78,95,88]},"settings":{"theme":"dark","notifications":true,"permissions":["read","write","execute"]},"history":[{"date":"2024-03-15","action":"login"},{"date":"2024-03-14","action":"logout"}]})";
const std::string medium_mixed_json_indented = R"({
    "user": {
        "name": "John",
        "age": 30,
        "active": true
    },
    "stats": {
        "logins": [
            1,
            2,
            3,
            4,
            5
        ],
        "scores": [
            85,
            92,
            78,
            95,
            88
        ]
    },
    "settings": {
        "theme": "dark",
        "notifications": true,
        "permissions": [
            "read",
            "write",
            "execute"
        ]
    },
    "history": [
        {
            "date": "2024-03-15",
            "action": "login"
        },
        {
            "date": "2024-03-14",
            "action": "logout"
        }
    ]
})";

const std::string large_mixed_json = R"({"system":{"name":"Production","version":"1.2.3","status":"active"},"users":[{"id":1,"name":"John","roles":["admin","user"],"permissions":["read","write","execute"]},{"id":2,"name":"Alice","roles":["user"],"permissions":["read"]}],"metrics":{"cpu":[45,50,55,60,65],"memory":[1024,2048,3072,4096,5120],"network":[100,200,300,400,500]},"config":{"features":{"logging":true,"monitoring":true,"backup":true},"limits":{"max_users":1000,"max_storage":1000000},"security":{"encryption":true,"2fa":true}}})";
const std::string large_mixed_json_indented = R"({
    "system": {
        "name": "Production",
        "version": "1.2.3",
        "status": "active"
    },
    "users": [
        {
            "id": 1,
            "name": "John",
            "roles": [
                "admin",
                "user"
            ],
            "permissions": [
                "read",
                "write",
                "execute"
            ]
        },
        {
            "id": 2,
            "name": "Alice",
            "roles": [
                "user"
            ],
            "permissions": [
                "read"
            ]
        }
    ],
    "metrics": {
        "cpu": [
            45,
            50,
            55,
            60,
            65
        ],
        "memory": [
            1024,
            2048,
            3072,
            4096,
            5120
        ],
        "network": [
            100,
            200,
            300,
            400,
            500
        ]
    },
    "config": {
        "features": {
            "logging": true,
            "monitoring": true,
            "backup": true
        },
        "limits": {
            "max_users": 1000,
            "max_storage": 1000000
        },
        "security": {
            "encryption": true,
            "2fa": true
        }
    }
})";

const std::string extra_large_mixed_json = R"({"enterprise":{"name":"TechCorp","departments":[{"id":"ENG","name":"Engineering","employees":[{"id":1,"name":"John","skills":["C++","Python","Java"],"projects":[{"id":"P1","name":"Core","status":"active"},{"id":"P2","name":"API","status":"completed"}]},{"id":2,"name":"Alice","skills":["JavaScript","TypeScript","React"],"projects":[{"id":"P3","name":"Frontend","status":"active"}]}]},{"id":"HR","name":"Human Resources","employees":[{"id":3,"name":"Bob","skills":["Recruitment","Training"],"projects":[{"id":"P4","name":"Onboarding","status":"active"}]}]}]},"infrastructure":{"servers":[{"id":"S1","type":"web","specs":{"cpu":8,"memory":16384,"storage":1000000},"status":"active"},{"id":"S2","type":"db","specs":{"cpu":16,"memory":32768,"storage":2000000},"status":"active"}],"monitoring":{"metrics":{"cpu_usage":[45,50,55,60,65,70,75,80,85,90],"memory_usage":[1024,2048,3072,4096,5120,6144,7168,8192,9216,10240],"network_traffic":[100,200,300,400,500,600,700,800,900,1000]},"alerts":[{"id":"A1","type":"high_cpu","threshold":80,"active":true},{"id":"A2","type":"low_memory","threshold":1024,"active":false}]}}})";
const std::string extra_large_mixed_json_indented = R"({
    "enterprise": {
        "name": "TechCorp",
        "departments": [
            {
                "id": "ENG",
                "name": "Engineering",
                "employees": [
                    {
                        "id": 1,
                        "name": "John",
                        "skills": [
                            "C++",
                            "Python",
                            "Java"
                        ],
                        "projects": [
                            {
                                "id": "P1",
                                "name": "Core",
                                "status": "active"
                            },
                            {
                                "id": "P2",
                                "name": "API",
                                "status": "completed"
                            }
                        ]
                    },
                    {
                        "id": 2,
                        "name": "Alice",
                        "skills": [
                            "JavaScript",
                            "TypeScript",
                            "React"
                        ],
                        "projects": [
                            {
                                "id": "P3",
                                "name": "Frontend",
                                "status": "active"
                            }
                        ]
                    }
                ]
            },
            {
                "id": "HR",
                "name": "Human Resources",
                "employees": [
                    {
                        "id": 3,
                        "name": "Bob",
                        "skills": [
                            "Recruitment",
                            "Training"
                        ],
                        "projects": [
                            {
                                "id": "P4",
                                "name": "Onboarding",
                                "status": "active"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "infrastructure": {
        "servers": [
            {
                "id": "S1",
                "type": "web",
                "specs": {
                    "cpu": 8,
                    "memory": 16384,
                    "storage": 1000000
                },
                "status": "active"
            },
            {
                "id": "S2",
                "type": "db",
                "specs": {
                    "cpu": 16,
                    "memory": 32768,
                    "storage": 2000000
                },
                "status": "active"
            }
        ],
        "monitoring": {
            "metrics": {
                "cpu_usage": [
                    45,
                    50,
                    55,
                    60,
                    65,
                    70,
                    75,
                    80,
                    85,
                    90
                ],
                "memory_usage": [
                    1024,
                    2048,
                    3072,
                    4096,
                    5120,
                    6144,
                    7168,
                    8192,
                    9216,
                    10240
                ],
                "network_traffic": [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000
                ]
            },
            "alerts": [
                {
                    "id": "A1",
                    "type": "high_cpu",
                    "threshold": 80,
                    "active": true
                },
                {
                    "id": "A2",
                    "type": "low_memory",
                    "threshold": 1024,
                    "active": false
                }
            ]
        }
    }
})";

const std::map<std::string, std::string> benchmark_data = {
    {"small_flat_json", small_flat_json},
    {"medium_flat_json", medium_flat_json},
    {"large_flat_json", large_flat_json},
    
    {"small_flat_json_indented", small_flat_json_indented},
    {"medium_flat_json_indented", medium_flat_json_indented},
    {"large_flat_json_indented", large_flat_json_indented},

    {"small_nested_json", small_nested_json},
    {"medium_nested_json", medium_nested_json},
    {"large_nested_json", large_nested_json},

    {"small_nested_json_indented", small_nested_json_indented},
    {"medium_nested_json_indented", medium_nested_json_indented},
    {"large_nested_json_indented", large_nested_json_indented},

    {"small_array_json", small_array_json},
    {"medium_array_json", medium_array_json},
    {"large_array_json", large_array_json},
    
    {"small_array_json_indented", small_array_json_indented},
    {"medium_array_json_indented", medium_array_json_indented},
    {"large_array_json_indented", large_array_json_indented},

    {"small_mixed_json", small_mixed_json},
    {"medium_mixed_json", medium_mixed_json},
    {"large_mixed_json", large_mixed_json},
    {"extra_large_mixed_json", extra_large_mixed_json},
    
    {"small_mixed_json_indented", small_mixed_json_indented},
    {"medium_mixed_json_indented", medium_mixed_json_indented},
    {"large_mixed_json_indented", large_mixed_json_indented},
    {"extra_large_mixed_json_indented", extra_large_mixed_json_indented}
};
